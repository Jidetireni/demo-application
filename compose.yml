services:
  db:
    image: postgres:16.3-alpine
    container_name: demoapp_db
    networks:
      - demoapp-network
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./data:/var/lib/postgresql/data 
    #  - ./postgresql/migrations:/docker-entrypoint-initdb.d 
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  migration-runner: 
      build:
        context: ./postgresql 
        dockerfile: dockerfile 
      container_name: demoapp-migration-runner
      image: tireni/demoapp-migration-runner:v1.0.0
      networks:
        - demoapp-network
      environment:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
        MIGRATE_DATABASE_URL: ${MIGRATE_DATABASE_URL}
      command: ["-path", "/app/migrations", "-database", "${MIGRATE_DATABASE_URL}", "up"]
      depends_on:
        db:
          condition: service_healthy 
      restart: 'no' 


  api-node:
    build:
      context: ./api-node
      dockerfile: dockerfile
    container_name: demoapp-nodeapi
    image: tireni/demoapp-nodeapi:v1.0.0 
    ports:
      - "3000:3000"
    networks:
      - demoapp-network
    environment:
      DATABASE_URL: ${DATABASE_URL} 
    depends_on:
      - db
    restart: unless-stopped

  api-golang:
    build:
      context: ./api-golang
      dockerfile: Dockerfile # Corrected from 'dockerfile'
    container_name: demoapp-goapi
    image: tireni/demoapp-goapi:v1.0.0 
    ports:
      - "8000:8000" 
    networks:
      - demoapp-network
    environment:
      DATABASE_URL: ${DATABASE_URL} 
      # GIN_MODE: "release" 
    depends_on:
      - db
    restart: unless-stopped

  load-generator:
    build:
      context: ./load-generator-python
      dockerfile: dockerfile
    container_name: demoapp-loadgen
    image: tireni/demoapp-loadgen:v1.0.0
    networks:
      - demoapp-network
    depends_on:
      - api-node
      - api-golang
    environment:
      API_URL: ${API_URL}
      DELAY_MS: ${DELAY_MS}
    restart: on-failure # Or 'no' if you only want it to run once per 'up'
    # restart: unless-stopped

  client-react:
    build:
      context: ./client-react
      dockerfile: dockerfile
    container_name: demoapp-fe
    image: tireni/demoapp-fe:v1.0.0 
    ports:
      - "8080:8080" 
    networks:
      - demoapp-network
    depends_on:
      - api-node
      - api-golang
    restart: unless-stopped

networks:
  demoapp-network:
    driver: bridge
